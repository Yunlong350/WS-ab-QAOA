import numpy as np
import matplotlib.pyplot as plt


GW0=np.zeros((9,40))
bias0=np.zeros((9,40))


#WS-ab-QAOA for n=200,400,600,800,1000

bias0=np.array([ 270.6  ,   541.95,   817.65, 1089.65 , 1361.775])


#GW algorithm for different R and n=200,400,600,800,1000
R=[10,50,100,500,1000,5000,10000,50000,100000,500000,1000000]
GW=np.zeros((5,len(R)))

GW[0]=np.array([268.975, 270.725, 271.2  , 272.25 , 272.625, 273.4  , 273.5  ,
       273.75 , 273.8  , 273.9  , 273.925])

GW[1]=np.array([536.9  , 540.525, 541.725, 543.25 , 544.225, 545.3  , 545.95 ,
       546.8  , 547.2  , 547.725, 547.875])

GW[2]=np.array([806.375, 810.75 , 812.05 , 813.875, 815.025, 816.875, 817.675,
       819.05 , 819.4  , 820.425, 820.875])

GW[3]=np.array([1073.65 , 1078.55 , 1079.975, 1083.5  , 1084.525, 1087.2  ,
       1087.925, 1089.8  , 1090.6  , 1091.8  , 1092.35 ])

GW[4]=np.array([1341.25 , 1347.15 , 1348.775, 1352.7  , 1353.8  , 1356.225,
       1357.6  , 1359.975, 1361.05 , 1362.275, 1362.85 ])

n_list=np.array([200*i for i in range(1,6)])

#Figure 5
plt.figure()

c1=['#383838', '#5CA7C7', '#D4352D', '#FBCE6A','#6BC179']
#c1=['#237B9F', '#71BFB2', '#AD0B08', '#EC817E', '#FEE066']
m1=['<','s','p','h','8']

for i in range(5):

    plt.plot(np.log10(R),GW[i]/1.5/n_list[i],marker=m1[i],color=c1[i],label=r'$n=$'+str(n_list[i]))
    plt.plot(np.array([1,6]),np.array([bias0[i],bias0[i]])/n_list[i]/1.5,color=c1[i],linestyle='--' )
    
plt.xlabel(r'$\log_{10} R$',fontsize=14)
plt.ylabel(r'$N_\mathrm{cut}^\mathrm{alg}/|\mathcal{E}|$',fontsize=14)
plt.legend(prop={'size': 12})
plt.yticks([0.89,0.9,0.91])
plt.tick_params(labelsize='13')
plt.savefig('Fig_nR1.pdf',format='pdf',dpi=1200,bbox_inches='tight')
plt.show()


#Fig6
Rcut=np.zeros((9,40))

#200
Rcut[0]=np.array([3.1000e+02, 9.3600e+02, 8.0000e+00, 3.0000e+00, 2.3600e+02,
       1.0000e+00, 4.5000e+01, 6.2300e+02, 3.4200e+03, 3.0000e+00,
       8.8000e+01, 8.6000e+01, 1.8000e+01, 8.0600e+02, 6.0000e+00,
       1.8300e+02, 4.0000e+00, 9.9000e+01, 3.0000e+00, 2.1000e+01,
       2.1000e+01, 1.8200e+02, 8.0000e+00, 3.5000e+01, 1.1651e+04,
       3.4000e+01, 8.7000e+02, 3.8500e+02, 8.0000e+00, 8.0000e+00,
       1.9010e+03, 3.0000e+00, 6.0000e+00, 1.9800e+02, 4.2000e+01,
       1.4820e+03, 1.8000e+01, 1.2000e+01, 2.0000e+00, 1.8800e+02])
#300
Rcut[1]=np.array([4.90000e+01, 2.10000e+01, 1.06000e+02, 2.70000e+01, 3.00000e+00,
       1.10000e+02, 4.23000e+02, 2.13000e+02, 7.00000e+00, 4.82600e+03,
       8.11000e+02, 8.90000e+01, 9.87000e+02, 5.50000e+01, 7.60000e+01,
       4.68550e+04, 2.31000e+02, 5.00000e+00, 2.70000e+01, 4.53100e+03,
       3.00000e+00, 1.00000e+00, 5.00000e+00, 3.10000e+01, 2.25000e+03,
       2.51100e+03, 1.91000e+02, 2.77417e+05, 4.00000e+01, 2.54000e+02,
       5.60000e+01, 1.10000e+01, 5.15000e+02, 2.47000e+02, 1.00000e+00,
       1.20000e+01, 8.50000e+01, 3.10000e+01, 6.63000e+02, 1.00000e+06])
#400
Rcut[2]=np.array([2.38000e+02, 2.58050e+04, 2.90000e+01, 2.40000e+01, 1.00000e+06,
       9.00000e+00, 6.43000e+02, 1.10000e+01, 8.73100e+03, 2.77587e+05,
       7.00000e+00, 1.00000e+01, 2.00000e+01, 1.70000e+01, 3.40000e+01,
       1.10460e+04, 1.50000e+01, 4.59800e+03, 6.80000e+01, 8.10000e+01,
       1.03500e+03, 5.58000e+02, 9.00000e+00, 2.40000e+01, 5.40000e+01,
       8.45000e+02, 1.04000e+02, 2.00000e+01, 4.20000e+01, 5.30000e+01,
       4.17000e+02, 7.67000e+02, 5.90000e+01, 2.83630e+04, 5.00000e+00,
       1.29000e+02, 2.70000e+01, 1.98000e+02, 8.62000e+02, 7.20000e+01])
#500
Rcut[3]=np.array([5.30000e+01, 1.19200e+03, 1.00000e+06, 6.10000e+01, 5.44778e+05,
       7.10000e+01, 1.00000e+06, 1.39600e+03, 1.30760e+04, 3.60000e+01,
       5.80000e+01, 1.00000e+06, 2.63000e+02, 5.55104e+05, 2.00000e+01,
       1.21700e+03, 2.47000e+02, 1.53800e+03, 1.32000e+02, 6.70000e+01,
       3.14000e+02, 1.00000e+06, 2.75700e+03, 1.00000e+06, 2.33000e+02,
       4.30000e+01, 1.26365e+05, 2.28900e+03, 7.40000e+01, 5.40000e+01,
       2.20000e+01, 1.98000e+02, 1.00000e+06, 5.55950e+04, 2.17000e+02,
       9.20000e+01, 4.53800e+03, 3.18450e+04, 2.06500e+03, 4.90000e+02])
#600
Rcut[4]=np.array([1.61410e+04, 6.35000e+02, 1.00000e+06, 1.20200e+03, 7.26400e+03,
       4.69700e+03, 3.64878e+05, 1.70000e+01, 1.00000e+06, 1.00000e+06,
       1.02300e+03, 2.10000e+01, 5.25200e+03, 9.59000e+02, 3.50000e+01,
       7.13900e+03, 2.89914e+05, 4.56808e+05, 9.38600e+03, 9.95000e+02,
       1.00000e+06, 1.00000e+06, 3.97000e+02, 1.00000e+06, 1.00000e+06,
       1.57000e+02, 3.90000e+01, 1.47700e+03, 1.80070e+04, 1.65243e+05,
       7.35000e+02, 4.58500e+03, 2.10000e+01, 3.80400e+03, 5.45800e+03,
       1.00000e+06, 5.77480e+04, 3.59920e+04, 8.92460e+04, 3.34900e+03])
#700
Rcut[5]=np.array([1.00000e+06, 9.41000e+02, 1.00000e+06, 7.99400e+03, 2.42958e+05,
       1.85730e+04, 1.11900e+03, 7.00000e+01, 1.96000e+02, 1.23600e+03,
       5.14900e+03, 1.00000e+06, 2.71800e+03, 8.50000e+01, 2.10740e+04,
       1.00000e+00, 4.75000e+02, 1.00000e+06, 1.10000e+01, 9.20000e+02,
       1.00000e+06, 3.09900e+03, 3.71700e+03, 3.96008e+05, 6.14000e+02,
       1.41100e+03, 9.49000e+02, 1.97479e+05, 2.43200e+03, 2.15000e+02,
       1.99000e+02, 1.00000e+06, 2.00000e+01, 2.18680e+04, 4.59730e+04,
       8.72700e+05, 1.29371e+05, 1.07500e+03, 1.13910e+05, 1.96400e+03])

#800
Rcut[6]=np.array([1.64700e+03, 3.55200e+03, 1.00000e+06, 1.00000e+06, 5.30000e+01,
       6.55600e+04, 2.23380e+04, 2.27000e+02, 2.70590e+04, 1.00000e+06,
       1.52740e+04, 1.28180e+04, 1.63600e+03, 4.48970e+04, 1.00000e+06,
       2.63098e+05, 6.57175e+05, 4.53770e+04, 3.86480e+04, 1.01800e+03,
       6.99200e+03, 1.00000e+06, 1.32610e+04, 2.80000e+01, 1.00000e+06,
       1.00000e+06, 1.76500e+03, 1.00000e+06, 7.33750e+04, 2.95410e+04,
       1.00000e+06, 9.62200e+03, 2.73700e+03, 1.45000e+02, 1.00000e+06,
       1.00000e+06, 1.84120e+04, 2.19000e+02, 2.72240e+04, 1.00000e+06])

#900
Rcut[7]=np.array([1.81400e+04, 9.83800e+03, 2.38432e+05, 1.00000e+06, 1.00000e+06,
       1.00000e+06, 7.03283e+05, 1.55000e+02, 1.00000e+06, 1.85640e+04,
       3.08900e+03, 1.00000e+06, 9.41600e+03, 4.40787e+05, 2.78800e+03,
       4.30340e+04, 1.00000e+06, 6.43413e+05, 5.84480e+04, 3.68590e+04,
       5.56200e+03, 5.85313e+05, 5.60000e+01, 1.09560e+04, 1.93100e+03,
       1.17430e+04, 1.00000e+06, 8.81800e+03, 1.00000e+06, 3.50611e+05,
       1.00000e+06, 8.21861e+05, 1.16600e+03, 1.00000e+06, 7.03480e+04,
       7.99690e+04, 1.00000e+06, 4.01000e+03, 1.00000e+06, 1.90000e+02])
#1000
Rcut[8]=np.array([1.00000e+06, 8.12000e+02, 3.04500e+04, 1.00000e+06, 1.99966e+05,
       4.87000e+02, 3.30000e+01, 2.47190e+04, 5.89770e+04, 3.09900e+03,
       1.00000e+06, 7.69490e+04, 1.00000e+06, 1.70920e+04, 1.00000e+06,
       1.00000e+06, 6.09320e+05, 4.71000e+02, 2.25100e+03, 1.00000e+06,
       2.34000e+02, 1.45370e+04, 1.00000e+06, 8.30000e+05, 1.77760e+05,
       6.82110e+04, 1.16610e+04, 1.00000e+06, 1.00000e+06, 1.00000e+06,
       1.00000e+06, 2.49816e+05, 1.90259e+05, 1.87247e+05, 1.24480e+04,
       5.68450e+04, 1.00000e+06, 1.82767e+05, 1.00000e+06, 6.62500e+03])


n_list=np.array([100*i for i in range(2,11)])
plt.figure()

plt.plot(n_list,np.log10(np.mean(Rcut,axis=1)),marker='P',color='#FD763F')

plt.xlabel(r'$n$',fontsize=14)
plt.ylabel(r'$\log_{10} R$',fontsize=14)
plt.tick_params(labelsize='13')
plt.savefig('Fig_nR2.pdf',format='pdf',dpi=1200,bbox_inches='tight')
plt.show()
    








